name: Run migrations and reset database on Preview environment

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  # Check if there have been any changes in supabase/migrations/*.
  check-paths:
    runs-on: ubuntu-latest
    outputs:
      should_run_migration: ${{ steps.check-migration-files.outputs.should_run_migration }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if migration files were changed
        id: check-migration-files
        run: |
          # Clone the complete repository (default is shallow clone)
          git fetch --prune --unshallow

          # Check if the migration file has changed
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -E '^supabase/migrations/' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Migration files were changed, should run migration"
            echo "should_run_migration=true" >> $GITHUB_OUTPUT
          else
            echo "No migration files were changed, skipping migration"
            echo "should_run_migration=false" >> $GITHUB_OUTPUT
          fi

  migration:
    needs: check-paths
    if: needs.check-paths.outputs.should_run_migration == 'true'
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # ------------------------------------
    # Set Vercel environment to .env.local
    # ------------------------------------
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Preview Environment Variables
      run: vercel env pull .env.local --environment preview --yes --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    # ------------------------------------
    # Run migrations
    # ------------------------------------
    - name: Install Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    # Use Vercel environment variables
    - name: Link to the project
      run: |
        export SUPABASE_PROJECT_ID=$(grep SUPABASE_PROJECT_ID .env.local | cut -d '=' -f2 | sed 's/"//g')
        export SUPABASE_DB_PASSWORD=$(grep SUPABASE_DB_PASSWORD .env.local | cut -d '=' -f2 | sed 's/"//g')
        export SUPABASE_ACCESS_TOKEN=$(grep SUPABASE_ACCESS_TOKEN .env.local | cut -d '=' -f2 | sed 's/"//g')
        if [ -z "$SUPABASE_PROJECT_ID" ] || [ -z "$SUPABASE_DB_PASSWORD" ]; then
          echo "Error: Missing Supabase environment variables"
          exit 1
        fi
        supabase link --project-ref $SUPABASE_PROJECT_ID --password $SUPABASE_DB_PASSWORD
      env:
        SUPABASE_ACCESS_TOKEN: $SUPABASE_ACCESS_TOKEN

    - name: Run migrations
      run: |
        set -e
        supabase migration up

    # ------------------------------------
    # Reset Supabase Database
    # ------------------------------------
    - name: Reset Supabase Database
      run: |
        set -e
        echo "yes" | supabase db reset --linked

  # Job always running - output success, failure, or skip
  result:
    needs: [check-paths, migration]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Set migration result
        id: set-result
        run: |
          if [[ "${{ needs.check-paths.outputs.should_run_migration }}" == "false" ]]; then
            echo "Migration was skipped (no relevant files changed)"
            echo "MIGRATION_RESULT=skipped" >> $GITHUB_ENV
          elif [[ "${{ needs.migration.result }}" == "success" ]]; then
            echo "Migration was successful"
            echo "MIGRATION_RESULT=success" >> $GITHUB_ENV
          else
            echo "Migration failed or was cancelled"
            echo "MIGRATION_RESULT=failure" >> $GITHUB_ENV
          fi
