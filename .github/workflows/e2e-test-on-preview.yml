name: 🌐 E2E Test on Preview environment

on:
  workflow_run:
    workflows: ["🔀 Run migrations and reset database on Preview environment"]
    types:
      - completed

# for gh api
permissions:
  actions: read
  contents: read

jobs:
  check-migration-status:
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.check-migration.outputs.should_run_tests }}
    steps:
      - name: Check if migration workflow was executed
        id: check-migration
        run: |
          # Get the PR number
          PR_NUMBER=${{ github.event.pull_request.number }}

          # Get workflow ID first (more reliable than using filename)
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows --jq '.workflows[] | select(.name=="🔀 Run migrations and reset database on Preview environment") | .id')

          if [ -z "$WORKFLOW_ID" ]; then
            echo "Could not find migration workflow"
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found migration workflow with ID: $WORKFLOW_ID"

          # Get the list of workflow runs for the migration workflow for this PR
          MIGRATION_RUNS=$(gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            -X GET \
            -f event=pull_request \
            -f branch=${{ github.head_ref }} \
            --jq '.workflow_runs[] | select(.head_branch == "${{ github.head_ref }}" and (.pull_requests | length > 0) and .pull_requests[].number == '$PR_NUMBER')')

          if [ -z "$MIGRATION_RUNS" ]; then
            echo "Migration workflow was not triggered for this PR (skipped)"
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
          else
            # Get the most recent run
            LATEST_RUN=$(echo "$MIGRATION_RUNS" | jq -s 'sort_by(.created_at) | reverse | .[0]')
            STATUS=$(echo "$LATEST_RUN" | jq -r '.status')
            CONCLUSION=$(echo "$LATEST_RUN" | jq -r '.conclusion')

            echo "Migration workflow status: $STATUS, conclusion: $CONCLUSION"

            if [ "$STATUS" = "completed" ] && [ "$CONCLUSION" = "failure" ]; then
              echo "Migration workflow failed, skipping E2E tests"
              echo "should_run_tests=false" >> $GITHUB_OUTPUT
            else
              echo "Migration workflow succeeded or was skipped, running E2E tests"
              echo "should_run_tests=true" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: check-migration-status
    if: needs.check-migration-status.outputs.should_run_tests == 'true'
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # ------------------------------------
    # Set Vercel environment to .env.local
    # ------------------------------------
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Preview Environment Variables
      run: vercel env pull .env.local --environment preview --yes --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    # ------------------------------------
    # Build Next.js using cache
    # ------------------------------------
    - name: Cache Next.js build
      id: cache-build
      uses: actions/cache@v4
      with:
        path: .next/cache
        key: build-${{ github.ref_name }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: build-${{ github.ref_name }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

    - name: Run Build
      run: pnpm build

    # ------------------------------------
    # Install Playwright using cache
    # ------------------------------------
    - name: Cache Playwright Browsers
      id: playwright-browsers-cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright/
        key: playwright-browsers-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: playwright-browsers-${{ runner.os }}-

    - name: Install Playwright Browsers
      if: steps.playwright-browsers-cache.outputs.cache-hit != 'true'
      run: pnpm exec playwright install --with-deps

    # Install only dependencies
    # Browser installation uses cache, but dependencies must be installed without using cache or the following error occurs
    # `Error: browserType.launch: Target page, context or browser has been closed`
    - name: Install Playwright dependencies
      run: pnpm exec playwright install-deps

    # ------------------------------------
    # Run Playwright tests
    # ------------------------------------
    - name: Run Playwright tests
      run: pnpm e2e

    # ------------------------------------
    # Upload report
    # ------------------------------------
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
